<h1>Kies een Parcelshop:</h1>

<label>Zoek op adres:</label>
<input type="text" value="<?php echo $this->escapeHtml($this->getAddress()) ?>" id="jet_address"/>

<input type="button" value="Zoeken" id="jet_submit_address"/>

<div id="lastmile_lightbox_map"></div>
<div id="lastmile_lightbox_loading" style="display: none">bezig met laden</div>


<input type="hidden" name="lastmile_parcelshop_id" id="lastmile_parcelshop_id"/>
<input type="hidden" name="lastmile_parcelshop_description" id="lastmile_parcelshop_description"/>

<script type="text/javascript">

    var map;
    var infowindow = [];
    var marker = [];
    var lookup = [];
    var geocoder;

    function initialize() {
        var myLatlng = new google.maps.LatLng(52.040638, 5.5626736);
        var myOptions = {
            zoom: 11,
            center: myLatlng
        }
        map = new google.maps.Map(document.getElementById("lastmile_lightbox_map"), myOptions);
        geocoder = new google.maps.Geocoder();

        map.addListener('idle', function () {
            getParcelShopsByAddress(map.getCenter().lat() + ',' + map.getCenter().lng());

        });
    }

    function createMarker(lat, lng, html, icon, timeout) {
        window.setTimeout(function () {
            var newmarker = new google.maps.Marker({
                position: new google.maps.LatLng(lat, lng),
                map: map,
                icon: icon,
                animation: google.maps.Animation.DROP
            });

            newmarker['infowindow'] = new google.maps.InfoWindow({
                content: '<div class="infowindow-content">' + html + '</div>'
            });

            google.maps.event.addListener(newmarker, 'click', function () {
                closeInfowindows();
                this['infowindow'].open(map, this);
            });

            marker.push(newmarker);

            lookup.push([lat, lng]);
        }, timeout);
    }

    function closeInfowindows() {
        for (var i = 0; i < marker.length; i++) {
            marker[i].infowindow.close();
        }
    }

    function getMarkerByPosition(lat, lng) {
        for (var i = 0, l = lookup.length; i < l; i++) {
            if (lookup[i][0] === lat && lookup[i][1] === lng) {
                return true;
            }
        }
        return false;
    }

    function getParcelShopsData(latitude, longitude) {
        new Ajax.Request('<?php echo Mage::getUrl('jetverzendt/parcelshop/data') ?>', {
            method: 'post',
            parameters: {latitude: latitude, longitude: longitude},
            onSuccess: function (transport) {
                result = transport.responseText.evalJSON();
                for (var index = 0; index < result.length; ++index) {

                    var item = result[index];

                    if (getMarkerByPosition(item.lat, item.lng) == false) {
                        createMarker(item.lat, item.lng, item.html, item.marker, index * 125);
                    }
                }
                new Effect.Fade('lastmile_lightbox_loading',
                    {duration: 1});


            }
        });
    }

    function getZipCodeFromGeoCode(results) {
        var result = '';
        for (i = 0; i < results.length; i++) {
            for (var j = 0; j < results[i].address_components.length; j++) {
                for (var k = 0; k < results[i].address_components[j].types.length; k++) {
                    if (results[i].address_components[j].types[k] == "postal_code") {
                        result = results[i].address_components[j].short_name;
                    }
                }
            }
        }
        return result;
    }

    function getNumberFromGeoCode(results) {
        var result = 1;
        for (i = 0; i < results.length; i++) {
            for (var j = 0; j < results[i].address_components.length; j++) {
                for (var k = 0; k < results[i].address_components[j].types.length; k++) {
                    if (results[i].address_components[j].types[k] == "street_number") {
                        result = results[i].address_components[j].short_name;
                    }
                }
            }
        }
        return result;
    }


    function getCountryFromGeoCode(results) {
        for (i = 0; i < results.length; i++) {
            for (var j = 0; j < results[i].address_components.length; j++) {
                for (var k = 0; k < results[i].address_components[j].types.length; k++) {
                    if (results[i].address_components[j].types[k] == "country") {
                        return results[i].address_components[j].short_name;
                    }
                }
            }
        }
        return 'NL';
    }

    function getCoordinatesFromGeoCode(results) {
        var country = 'NL';
        for (i = 0; i < results.length; i++) {
            for (var j = 0; j < results[i].address_components.length; j++) {
                for (var k = 0; k < results[i].address_components[j].types.length; k++) {
                    if (results[i].address_components[j].types[k] == "country") {
                        country = results[i].address_components[j].short_name;
                    }
                }
            }
        }
        return country;
    }


    function getParcelShopsByAddress(address) {
        $('lastmile_lightbox_loading').show();
        geocoder.geocode({'address': address}, function (results, status) {

            if (status === google.maps.GeocoderStatus.OK) {

                var latitude = results[0].geometry.location.lat();
                var longitude = results[0].geometry.location.lng();

                geocoder.geocode({'address': latitude + "," + longitude}, function (results, status) {
                    //zip_code = getZipCodeFromGeoCode(results);
                    //number = getNumberFromGeoCode(results);
                    //country = getCountryFromGeoCode(results);

                    getParcelShopsData(latitude, longitude);

                    map.setCenter(results[0].geometry.location);
                    var marker = new google.maps.Marker({
                        position: results[0].geometry.location
                    });
                });
            }
        });

    }

    $('jet_address').observe('keypress', function (event) {
        var key = event.which || event.keyCode;
        switch (key) {
            default:
                break;
            case Event.KEY_RETURN:
                getParcelShopsByAddress($('jet_address').getValue());
                break;
        }
    });


    Event.observe($('jet_submit_address'), 'click', function () {
        getParcelShopsByAddress($('jet_address').getValue());

        return false;
    });


    function stopRKey(evt) {
        var evt = (evt) ? evt : ((event) ? event : null);
        var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
        if ((evt.keyCode == 13) && (node.type == "text")) {
            return false;
        }
    }

    document.onkeypress = stopRKey;

    initialize();
    getParcelShopsByAddress($('jet_address').getValue());


</script>





